-- Immediate Extender
--
-- Extends the immediate to the full 32 bits using sign extension (left pad with the sign bit until 32 bits).
-- The values of `ImmSrc` we're chosen arbitrarly and are generated by the `Control Unit`.
--
-- Immediate Extender:
--   Inputs:
--     Instr[31:7] (25 bits) => the 32-bit instruction minus the opcode bits.
--     ImmSrc (2 bits) => encodes which bits from the instruction are part of the immediate that must be extended conditional on instruction type (I OR S OR B OR (J & U)).
--   Outputs:
--     ImmExt (32 bits) => the extended immediate.

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.NUMERIC_STD.ALL;

ENTITY immediate_extender IS
    PORT (
        instr : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
        imm_src : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
        imm_ext : OUT STD_LOGIC_VECTOR(31 DOWNTO 0)
    );
END ENTITY immediate_extender;

ARCHITECTURE behavioral OF immediate_extender IS
BEGIN
    imm_proc : PROCESS (instr, imm_src)
    BEGIN
        CASE imm_src IS
            WHEN "00" => -- I: sign-extend `instr[31:20]` to 32 bits
                imm_ext <= STD_LOGIC_VECTOR(RESIZE(SIGNED(instr(31 DOWNTO 20)), 32));
            WHEN "01" => -- S: sign-extend `instr[31:25] || instr[11:7]` to 32 bits
                imm_ext <= STD_LOGIC_VECTOR(RESIZE(SIGNED(instr(31 DOWNTO 25) & instr(11 DOWNTO 7)), 32));
            WHEN "10" => -- B: sign-extend `instr[31] & instr[7] & instr[30:25] & instr[11:8] & 0`
                imm_ext <= STD_LOGIC_VECTOR(RESIZE(SIGNED(instr(31) & instr(7) & instr(30 DOWNTO 25) & instr(11 DOWNTO 8) & '0'), 32));
            WHEN "11" => -- J & U:
                IF instr(6 DOWNTO 0) = "1101111" THEN -- J (jal): sign-extend `instr[31] & isntr[19:12] & instr[20] & instr[30:21] & 0` to 32 bits
                    imm_ext <= STD_LOGIC_VECTOR(RESIZE(SIGNED(instr(31) & instr(19 DOWNTO 12) & instr(20) & instr(30 DOWNTO 21) & '0'), 32));
                ELSE -- U: upper 20 bits from `instr[31:12]` || 0000 0000 0000
                    imm_ext <= STD_LOGIC_VECTOR(RESIZE(UNSIGNED(instr(31 DOWNTO 12) & "0000" & "0000" & "0000"), 32));
                END IF;
            WHEN OTHERS =>
                imm_ext <= (OTHERS => '0');
        END CASE;
    END PROCESS;
END ARCHITECTURE behavioral;

--------------------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.NUMERIC_STD.ALL;

ENTITY immext_tb IS
END ENTITY immext_tb;

ARCHITECTURE testbench OF immext_tb IS
    SIGNAL instr   : STD_LOGIC_VECTOR(31 DOWNTO 0);
    SIGNAL imm_src : STD_LOGIC_VECTOR(1 DOWNTO 0);
    SIGNAL imm_ext : STD_LOGIC_VECTOR(31 DOWNTO 0);
    SIGNAL finished: BOOLEAN := false;

    COMPONENT immediate_extender IS
        PORT (
            instr   : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
            imm_src : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
            imm_ext : OUT STD_LOGIC_VECTOR(31 DOWNTO 0)
        );
    END COMPONENT;

BEGIN
    uut : immediate_extender
    PORT MAP(
        instr   => instr,
        imm_src => imm_src,
        imm_ext => imm_ext
    );

    stimulus : PROCESS
    BEGIN
        instr <= (OTHERS => '0');
        imm_src <= (OTHERS => '0');
        WAIT FOR 10 ns;

        -- I (positive immediate)
        instr <= x"00500093";  -- addi x1, x0, 5 (immediate = 5)
        imm_src <= "00";       -- I
        WAIT FOR 10 ns;
        REPORT "I (positive immediate) Instr=0x" & to_hstring(instr) & " ImmExt=0x" & to_hstring(imm_ext);
        ASSERT imm_ext = x"00000005" REPORT "I (positive immediate) failed" SEVERITY error;

        -- S (positive immediate)
        instr <= x"00502223";  -- sw x5, 4(x0) (immediate = 4)
        imm_src <= "01";       -- S
        WAIT FOR 10 ns;
        REPORT "S (positive immediate) Instr=0x" & to_hstring(instr) & " ImmExt=0x" & to_hstring(imm_ext);
        ASSERT imm_ext = x"00000004" REPORT "S (positive immediate) failed" SEVERITY error;

        -- B (positive immediate)
        instr <= x"00500463";  -- beq x0, x5, 8 (immediate = 8)
        imm_src <= "10";       -- B
        WAIT FOR 10 ns;
        REPORT "B (positive immediate) Instr=0x" & to_hstring(instr) & " ImmExt=0x" & to_hstring(imm_ext);
        ASSERT imm_ext = x"00000008" REPORT "B (positive immediate) failed" SEVERITY error;

        -- J (negative immediate)
        instr <= x"FF9FF0EF";  -- jal x1, -8 (immediate = -8, opcode = 1101111)
        imm_src <= "11";       -- J & U
        WAIT FOR 10 ns;
        REPORT "J (negative immediate) Instr=0x" & to_hstring(instr) & " ImmExt=0x" & to_hstring(imm_ext);
        ASSERT imm_ext = x"FFFFFFF8" REPORT "-- J (negative immediate) failed" SEVERITY error;

        -- J (jal / positive immediate)
        instr <= x"008000EF";  -- jal x1, 8 (immediate = 8, opcode = 1101111)
        imm_src <= "11";       -- J & U
        WAIT FOR 10 ns;
        REPORT "(jal / positive immediate) Instr=0x" & to_hstring(instr) & " ImmExt=0x" & to_hstring(imm_ext);
        ASSERT imm_ext = x"00000008" REPORT "J (jal / positive immediate) failed" SEVERITY error;

        -- U (lui / positive immediate)
        instr <= x"123450B7";  -- lui x1, 0x12345 (immediate = 0x12345000, opcode = 0x0B7 / 0110111)
        imm_src <= "11";       -- J & U
        WAIT FOR 10 ns;
        REPORT "U (lui / positive immediate) Instr=0x" & to_hstring(instr) & " ImmExt=0x" & to_hstring(imm_ext);
        ASSERT imm_ext = x"12345000" REPORT "U (lui / positive immediate) failed" SEVERITY error;

        -- U (auipc)
        instr <= x"ABCDE097";  -- auipc x1, 0xABCDE (immediate = 0xABCDE000, opcode = 0x097 / 0010111)
        imm_src <= "11";       -- J & U
        WAIT FOR 10 ns;
        REPORT "U (auipc) Instr=0x" & to_hstring(instr) & " ImmExt=0x" & to_hstring(imm_ext);
        ASSERT imm_ext = x"ABCDE000" REPORT "U (auipc) failed" SEVERITY error;

        -- I (negative immediate)
        instr <= x"FFF00093";  -- addi x1, x0, -1
        imm_src <= "00";       -- I
        WAIT FOR 10 ns;
        REPORT "I (negative immediate) Instr=0x" & to_hstring(instr) & " ImmExt=0x" & to_hstring(imm_ext);
        ASSERT imm_ext = x"FFFFFFFF" REPORT "-- I (negative immediate) failed" SEVERITY error;

        -- S (negative immediate)
        instr <= x"FE502E23";  -- sw x5, -4(x0)
        imm_src <= "01";       -- S
        WAIT FOR 10 ns;
        REPORT "S (negative immediate) Instr=0x" & to_hstring(instr) & " ImmExt=0x" & to_hstring(imm_ext);
        ASSERT imm_ext = x"FFFFFFFC" REPORT "S (negative immediate) failed" SEVERITY error;

        -- B (negative immediate)
        instr <= x"FE500EE3";  -- beq x0, x5, -4
        imm_src <= "10";       -- B
        WAIT FOR 10 ns;
        REPORT "B (negative immediate) Instr=0x" & to_hstring(instr) & " ImmExt=0x" & to_hstring(imm_ext);
        ASSERT imm_ext = x"FFFFFFFC" REPORT "B (negative immediate) failed" SEVERITY error;

        -- Invalid `imm_src` (should output zero)
        instr <= x"12345678";
        imm_src <= "XX";       -- Invalid
        WAIT FOR 10 ns;
        REPORT "Invalid Immediate Source: ImmSrc=XX ImmExt=0x" & to_hstring(imm_ext);

        finished <= true;
        WAIT;
    END PROCESS;

END ARCHITECTURE testbench;